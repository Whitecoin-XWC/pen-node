project_name: pen

builds:
  - id: linux
    main: ./cmd/pen
    binary: pen
    flags:
      - -v
      - -trimpath
    ldflags:
      - -s -w -X github.com/penguintop/penguin.version={{.Version}} -X github.com/penguintop/penguin.commit={{.ShortCommit}}
    env:
      - CGO_ENABLED=0
    goos:
      - linux
    goarch:
      - amd64
      - 386
      - arm64
      - arm
    goarm:
      - 7
  - id: windows
    main: ./cmd/pen
    binary: pen
    flags:
      - -v
      - -trimpath
    ldflags:
      - -s -w -X github.com/penguintop/penguin.version={{.Version}} -X github.com/penguintop/penguin.commit={{.ShortCommit}}
    env:
      - CGO_ENABLED=0
    goos:
      - windows
    goarch:
      - amd64
      - 386
  - id: darwin
    main: ./cmd/pen
    binary: pen
    flags:
      - -v
      - -trimpath
    ldflags:
      - -s -w -X github.com/penguintop/penguin.version={{.Version}} -X github.com/penguintop/penguin.commit={{.ShortCommit}}
    env:
      - CGO_ENABLED=0
    goos:
      - darwin
    goarch:
      - amd64

snapshot:
  name_template: "{{.Tag}}-snapshot"

signs:
  - artifacts: checksum
    args: [
    "--pinentry-mode", "loopback",
    "--passphrase", "{{ .Env.GPG_PASSPHRASE }}",
    "-u", "{{ .Env.GPG_FINGERPRINT }}",
    "--output", "${signature}",
    "--detach-sign", "${artifact}",
  ]

archives:
  -
    id: scoop
    builds:
    - windows
    name_template: "{{ tolower .ProjectName }}-{{ tolower .Os }}-{{ tolower .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}"
    format: zip
    wrap_in_directory: false
    files:
    - packaging/scoop/pen.yaml
    - LICENSE
    - README.md
  -
    name_template: "{{ tolower .ProjectName }}-{{ tolower .Os }}-{{ tolower .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}"
    format: binary
  -
    id: homebrew
    builds:
    - darwin
    name_template: "{{ tolower .ProjectName }}-{{ tolower .Os }}-{{ tolower .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}"
    files:
    - packaging/homebrew/pen.yaml
    - packaging/homebrew/pen-get-addr
    - LICENSE
    - README.md

nfpms:
  - file_name_template: "{{ tolower .ProjectName }}_{{ tolower .Version }}_{{ tolower .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}"

    vendor: Ethereum Penguin
    homepage: https://penguin.ethereum.org/

    maintainer: Janoš Guljaš <janos@ethpenguin.org>

    description: Ethereum Penguin node

    license: GPL-3

    dependencies:
      - ca-certificates
      - adduser

    formats:
      - deb
      - rpm
    
    contents:
      - src: packaging/pen.service
        dst: /lib/systemd/system/pen.service
      - src: packaging/pen-get-addr
        dst: /usr/bin/pen-get-addr
      - src: packaging/pen.yaml
        dst: /etc/pen/pen.yaml
        type: config
      - src: packaging/default
        dst: /etc/default/pen
        type: config

    overrides:
      deb:
        dependencies:
          - passwd
          - ca-certificates
        scripts:
          preinstall: ./packaging/deb/preinst
          postinstall: ./packaging/deb/postinst
          preremove: ./packaging/deb/prerm
          postremove: ./packaging/deb/postrm
      rpm:
        dependencies:
          - ca-certificates
          - shadow-utils
        scripts:
          preinstall: ./packaging/rpm/pre
          postinstall: ./packaging/rpm/post
          preremove: ./packaging/rpm/preun
          postremove: ./packaging/rpm/postun

    bindir: /usr/bin

scoop:
  url_template: "https://github.com/penguintop/penguin/releases/download/{{ .Tag }}/{{ .ArtifactName }}"
  bucket:
    owner: ethersphere
    name: scoop
    token: "{{ .Env.SCOOP_PAT }}"

  commit_author:
    name: pen-worker
    email:

  commit_msg_template: "Scoop update for {{ .ProjectName }} version {{ .Tag }}"

  homepage:

  description: "Penguin client implemented in Go."

  license: BSD-3-Clause

  persist:
  - "data"
  - "packaging/scoop/pen.yaml"

  post_install:
    - "Write-Host 'Running postinstall command'"
    - "if(!(Test-Path $persist_dir\\pen.yaml)){New-Item -ItemType SymbolicLink -Path \"$persist_dir\\pen.yaml\" -Target \"$persist_dir\\packaging\\scoop\\pen.yaml\" | Out-Null}"
    - "(Get-Content -path $persist_dir\\pen.yaml -Raw) -replace './pen.yaml',\"$persist_dir\\pen.yaml\" | Set-Content -Path $persist_dir\\pen.yaml"
    - "(Get-Content -path $persist_dir\\pen.yaml -Raw) -replace './data',\"$persist_dir\\data\" | Set-Content -Path $persist_dir\\pen.yaml"
    - "(Get-Content -path $persist_dir\\pen.yaml -Raw) -replace './password',\"$persist_dir\\password\" | Set-Content -Path $persist_dir\\pen.yaml"
    - "if(!(Test-Path $persist_dir\\password)){[System.Web.Security.Membership]::GeneratePassword(32,5) | Set-Content -Path $persist_dir\\password}"
    - "if(sc.exe query PenguinPenSvc | Select-String FAILED){sc.exe create PenguinPenSvc binPath= \"$dir\\pen.exe start --config=$persist_dir\\pen.yaml\" type= share start= auto displayName= \"Pen\"; sc.exe description PenguinPenSvc \"Penguin client implemented in Go.\"}"
    - "if($global){$ETH_ADDRESS = (((C:\\ProgramData\\scoop\\shims\\pen.exe init --config=$persist_dir\\pen.yaml | Select-String ethereum) -split ' ‘)[-1]).Trim('\"')} else {$ETH_ADDRESS = (((pen.exe init --config=$persist_dir\\pen.yaml | Select-String ethereum) -split ' ‘)[-1]).Trim('\"')}; Write-Host \"Please make sure there is sufficient xwc and pen available on $ETH_ADDRESS address.\nLearn how to fund your node by visiting our docs at https://docs.ethpenguin.org/docs/installation/fund-your-node\""
    - "Write-Host \"Obtain a free Infura account and set: swap-endpoint: wss://goerli.infura.io/ws/v3/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx inside $persist_dir\\pen.yaml\""
    - "Write-Host \"After the initial fund deploy Pen chequebook with [sudo] $dir\\pen.exe deploy --config=$persist_dir\\pen.yaml\""
    - "Write-Host 'Start Pen service with [sudo] sc.exe start PenguinPenSvc'"

brews:
  - name: penguin-pen
    tap:
      owner: ethersphere
      name: homebrew-tap
      token: "{{ .Env.HOMEBREW_TAP_PAT }}"
    ids:
      - homebrew
    commit_author:
      name: pen-worker
      email:
    homepage:
    description: Ethereum Penguin node
    caveats: |
        Logs:   #{var}/log/penguin-pen/pen.log
        Config: #{etc}/penguin-pen/pen.yaml

        Pen requires an Ethereum endpoint to function. By default is using ws://localhost:8546 ethereum endpoint.
        If needed obtain a free Infura account and set:
        `swap-endpoint: wss://goerli.infura.io/ws/v3/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`
        It is recommended to use external signer with pen.
        Check documentation for more info:
        - SWAP https://docs.ethpenguin.org/docs/installation/manual#swap-bandwidth-incentives
        - External signer https://docs.ethpenguin.org/docs/installation/pen-clef

        After you finish configuration run 'pen-get-addr'.
    test: |
      system "#{bin}/pen version"
    install: |
      (etc/"penguin-pen").mkpath
      (var/"lib/penguin-pen").mkpath
      bin.install ["pen", "packaging/homebrew/pen-get-addr"]
      etc.install "packaging/homebrew/pen.yaml" => "penguin-pen/pen.yaml" unless File.exists? etc/"penguin-pen/pen.yaml"
    post_install: |
      unless File.exists? "#{var}/lib/penguin-pen/password"
      system("openssl", "rand", "-out", var/"lib/penguin-pen/password", "-base64", "32")
      end
      system(bin/"pen", "init", "--config", etc/"penguin-pen/pen.yaml", ">/dev/null", "2>&1")
    plist: |
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
      <plist version="1.0">
      <dict>
        <key>KeepAlive</key>
        <true/>
        <key>Label</key>
        <string>#{plist_name}</string>
        <key>ProgramArguments</key>
        <array>
          <string>#{bin}/pen</string>
          <string>start</string>
          <string>--config</string>
          <string>#{etc}/penguin-pen/pen.yaml</string>
        </array>
        <key>RunAtLoad</key>
        <true/>
        <key>WorkingDirectory</key>
        <string>/usr/local</string>
        <key>StandardOutPath</key>
        <string>#{var}/log/penguin-pen/pen.log</string>
        <key>StandardErrorPath</key>
        <string>#{var}/log/penguin-pen/pen.log</string>
      </dict>
      </plist>

dockers:
- image_templates:
  - "ethersphere/pen:{{ .Version }}-amd64"
  - "quay.io/ethersphere/pen:{{ .Version }}-amd64"
  use_buildx: true
  ids:
    - linux
  goarch: amd64
  dockerfile: Dockerfile.goreleaser
  build_flag_templates:
  - "--platform=linux/amd64"
  - "--pull"
  - "--label=org.opencontainers.image.created={{.Date}}"
  - "--label=org.opencontainers.image.title={{.ProjectName}}"
  - "--label=org.opencontainers.image.revision={{.FullCommit}}"
  - "--label=org.opencontainers.image.version={{.Version}}"
- image_templates:
  - "ethersphere/pen:{{ .Version }}-armv7"
  - "quay.io/ethersphere/pen:{{ .Version }}-armv7"
  use_buildx: true
  ids:
    - linux
  goarch: arm
  goarm: 7
  dockerfile: Dockerfile.goreleaser
  build_flag_templates:
  - "--platform=linux/arm/v7"
  - "--pull"
  - "--label=org.opencontainers.image.created={{.Date}}"
  - "--label=org.opencontainers.image.title={{.ProjectName}}"
  - "--label=org.opencontainers.image.revision={{.FullCommit}}"
  - "--label=org.opencontainers.image.version={{.Version}}"
- image_templates:
  - "ethersphere/pen:{{ .Version }}-arm64v8"
  - "quay.io/ethersphere/pen:{{ .Version }}-arm64v8"
  use_buildx: true
  ids:
    - linux
  goarch: arm64
  dockerfile: Dockerfile.goreleaser
  build_flag_templates:
  - "--platform=linux/arm64/v8"
  - "--pull"
  - "--label=org.opencontainers.image.created={{.Date}}"
  - "--label=org.opencontainers.image.title={{.ProjectName}}"
  - "--label=org.opencontainers.image.revision={{.FullCommit}}"
  - "--label=org.opencontainers.image.version={{.Version}}"
docker_manifests:
- name_template: ethersphere/pen:{{ .Major }}
  image_templates:
  - ethersphere/pen:{{ .Version }}-amd64
  - ethersphere/pen:{{ .Version }}-armv7
  - ethersphere/pen:{{ .Version }}-arm64v8
- name_template: ethersphere/pen:{{ .Major }}.{{ .Minor }}
  image_templates:
  - ethersphere/pen:{{ .Version }}-amd64
  - ethersphere/pen:{{ .Version }}-armv7
  - ethersphere/pen:{{ .Version }}-arm64v8
- name_template: ethersphere/pen:{{ .Major }}.{{ .Minor }}.{{ .Patch }}
  image_templates:
  - ethersphere/pen:{{ .Version }}-amd64
  - ethersphere/pen:{{ .Version }}-armv7
  - ethersphere/pen:{{ .Version }}-arm64v8
- name_template: ethersphere/pen:latest
  image_templates:
  - ethersphere/pen:{{ .Version }}-amd64
  - ethersphere/pen:{{ .Version }}-armv7
  - ethersphere/pen:{{ .Version }}-arm64v8
- name_template: ethersphere/pen:beta
  image_templates:
  - ethersphere/pen:{{ .Version }}-amd64
  - ethersphere/pen:{{ .Version }}-armv7
  - ethersphere/pen:{{ .Version }}-arm64v8
- name_template: quay.io/ethersphere/pen:{{ .Major }}
  image_templates:
  - quay.io/ethersphere/pen:{{ .Version }}-amd64
  - quay.io/ethersphere/pen:{{ .Version }}-armv7
  - quay.io/ethersphere/pen:{{ .Version }}-arm64v8
- name_template: quay.io/ethersphere/pen:{{ .Major }}.{{ .Minor }}
  image_templates:
  - quay.io/ethersphere/pen:{{ .Version }}-amd64
  - quay.io/ethersphere/pen:{{ .Version }}-armv7
  - quay.io/ethersphere/pen:{{ .Version }}-arm64v8
- name_template: quay.io/ethersphere/pen:{{ .Major }}.{{ .Minor }}.{{ .Patch }}
  image_templates:
  - quay.io/ethersphere/pen:{{ .Version }}-amd64
  - quay.io/ethersphere/pen:{{ .Version }}-armv7
  - quay.io/ethersphere/pen:{{ .Version }}-arm64v8
- name_template: quay.io/ethersphere/pen:latest
  image_templates:
  - quay.io/ethersphere/pen:{{ .Version }}-amd64
  - quay.io/ethersphere/pen:{{ .Version }}-armv7
  - quay.io/ethersphere/pen:{{ .Version }}-arm64v8
- name_template: quay.io/ethersphere/pen:beta
  image_templates:
  - quay.io/ethersphere/pen:{{ .Version }}-amd64
  - quay.io/ethersphere/pen:{{ .Version }}-armv7
  - quay.io/ethersphere/pen:{{ .Version }}-arm64v8
